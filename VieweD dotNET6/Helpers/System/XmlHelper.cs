using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Xml;

namespace VieweD.Helpers.System
{
    public static class XmlHelper
    {
        /// <summary>
        /// Creates a simple copy of a node's attribute values
        /// </summary>
        /// <param name="node"></param>
        /// <returns>A dictionary as a name value pair as a string where he name is always lowercase</returns>
        public static Dictionary<string, string> ReadNodeAttributes(XmlNode node)
        {
            var res = new Dictionary<string, string>();
            if (node.Attributes == null) 
                return res;

            for (var i = 0; i < node.Attributes.Count; i++)
            {
                var attr = node.Attributes[i];
                res.Add(attr.Name.ToLower(CultureInfo.InvariantCulture), attr.Value);
            }

            return res;
        }

        /// <summary>
        /// Get a specific string value from a attribute dictionary generated by ReadNodeAttributes
        /// </summary>
        /// <param name="list">Source dictionary of attributes</param>
        /// <param name="attributeName">Name of the attribute to get the value from</param>
        /// <returns>Returns the value of the requested attribute or a empty string if it doesn't exist</returns>
        public static string GetAttributeString(Dictionary<string, string> list, string attributeName)
        {
            return list.TryGetValue(attributeName.ToLower(CultureInfo.InvariantCulture), out var attribute) ? attribute : string.Empty;
        }

        public static long GetAttributeInt(Dictionary<string, string> list, string attributeName)
        {
            if (!list.TryGetValue(attributeName.ToLower(), out var attribute)) 
                return 0;

            return NumberHelper.TryFieldParse(attribute, out int v) ? v : 0;
        }

        public static bool HasAttribute(Dictionary<string, string> list, string attributeName)
        {
            return list.TryGetValue(attributeName.ToLower(), out _);
        }

        /// <summary>
        /// Adds new attribute to a node
        /// </summary>
        /// <param name="node"></param>
        /// <param name="attributeName"></param>
        /// <param name="attributeValue"></param>
        /// <returns></returns>
        public static XmlNode AddAttribute(XmlNode node, string attributeName, string attributeValue)
        {
            var typeAttribute = node.OwnerDocument?.CreateAttribute(attributeName);
            if (typeAttribute == null) 
                return node;

            typeAttribute.Value = attributeValue;
            node.Attributes?.Append(typeAttribute);

            return node;
        }

        /// <summary>
        /// Sets a attribute to a new value, or creates it if it doesn't exist
        /// </summary>
        /// <param name="node"></param>
        /// <param name="attributeName"></param>
        /// <param name="attributeValue"></param>
        /// <returns></returns>
        public static XmlNode SetAttribute(XmlNode node, string attributeName, string attributeValue)
        {
            //if ((node == null) || (node.Attributes == null))
            //    return node;
            XmlAttribute? typeAttribute = null;

            if (node.Attributes != null)
            {
                foreach (XmlAttribute attribute in node.Attributes)
                {
                    if (attribute.Name == attributeName)
                    {
                        typeAttribute = attribute;
                        break;
                    }
                }
            }

            if (typeAttribute == null)
                return AddAttribute(node, attributeName, attributeValue);

            typeAttribute.Value = attributeValue;

            return node;
        }

        public static string FormatXml(this string xml, bool indent = true, bool newLineOnAttributes = false, string indentChars = "  ", ConformanceLevel conformanceLevel = ConformanceLevel.Document) =>
            xml.FormatXml(new XmlWriterSettings { Indent = indent, NewLineOnAttributes = newLineOnAttributes, IndentChars = indentChars, ConformanceLevel = conformanceLevel });

        public static string FormatXml(this string xml, XmlWriterSettings settings)
        {
            try
            {
                using var textReader = new StringReader(xml);
                using var xmlReader = XmlReader.Create(textReader,
                    new XmlReaderSettings { ConformanceLevel = settings.ConformanceLevel });
                using var textWriter = new StringWriter();
                using (var xmlWriter = XmlWriter.Create(textWriter, settings))
                    xmlWriter.WriteNode(xmlReader, true);
                return textWriter.ToString();
            }
            catch
            {
                return xml;
            }
        }

        public static XmlNode? CreateNewXmlElementNode(XmlNode parentNode, string elementName)
        {
            var node = parentNode.OwnerDocument?.CreateNode(XmlNodeType.Element, elementName, null) ?? null;
            if (node != null)
            {
                parentNode.AppendChild(node);
            }
            return node;
        }

        public static XmlNode? CreateNewXmlTextNode(XmlNode parentNode, string elementName)
        {
            var node = parentNode.OwnerDocument?.CreateNode(XmlNodeType.Text, elementName, null) ?? null;
            if (node != null)
            {
                parentNode.AppendChild(node);
            }
            return node;
        }

    }
}